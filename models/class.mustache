const database = require('../Database/sqlite-wrapper.js')('{{{dbPath}}}');
const jsf = require('json-schema-faker');
const faker = require('faker');
jsf.extend('faker', ()=> {return faker});

const schema{{classTitle}} = require('../Schemas/schema-{{classTitle}}.json');

class {{classTitle}} {
    constructor({{constructorArguments}}) {
        {{#classConstructor}}
            this.{{name}} = {{name}};
        {{/classConstructor}}

        {{#classEnumerables}}
            Object.defineProperty(this, "{{name}}", {enumerable: false{{#writable}}, writable: true{{/writable}} });
        {{/classEnumerables}}

        {{#references}}
            Object.defineProperty(this, "{{name}}_id", {enumerable: false, writable: true });
        {{/references}}
    }

    static create() {
        return Object.assign(new {{classTitle}}(), jsf.generate(schema{{classTitle}}));
    }

    static all(callback) {
        database.where("SELECT * FROM {{classTitle}}", [], {{classTitle}}, callback);
    }

    save(callback) {
        let query = "";
        let propertiesJoin = "";
        let update = false;

        {{classTitle}}.all(item => {
            if (!this.{{primaryKey}}) return;
            else if (item.{{primaryKey}} == this.{{primaryKey}}) {
                update = true;
                return;
            }
        });

        if (update) {
            query = "UPDATE {{classTitle}} SET {{#propertiesUpdateJoin}}{{{name}}} = ?{{{comma}}}{{/propertiesUpdateJoin}} WHERE {{primaryKey}} = ?";
            propertiesJoin = [{{#propertiesUpdateJoin}}this.{{{name}}}{{{comma}}}{{/propertiesUpdateJoin}}];
        } else {
            query = "INSERT INTO {{classTitle}} ({{#propertiesUpdateJoin}}{{{name}}}{{{comma}}}{{/propertiesUpdateJoin}}) VALUES({{#questionMark}}{{{symbol}}}{{{comma}}}{{/questionMark}})";
            propertiesJoin = [{{#propertiesInsertJoin}}this.{{{name}}}{{{comma}}}{{/propertiesInsertJoin}}];
        }
        
        database.run(query,propertiesJoin,callback);
    }

    static get(id, callback) {
        database.where("SELECT * FROM {{classTitle}} WHERE {{primaryKey}} = ?", [id], {{classTitle}}, callback)
    }

    static delete(id, callback) {
        database.run("DELETE FROM {{classTitle}} WHERE {{primaryKey}} = ?", [id], callback)
    }

    static many(model, id, callback) {
        let tableName = "{{classTitle}}".localCompare(model) === -1 ? "{{classTitle}}_" + model : model + "_{{table}}";
        database.where(`SELECT {{classTitle}}.*
            FROM {{classTitle}}
            INNER JOIN ${tableName} ON ${tableName}.{{table}}_id = {{classTitle}}.id
            WHERE ${tableName}.${model.toLowerCase()}_id = ?`, [id], {{classTitle}}, callback);
    }
}

module.exports = {{classTitle}}