const express = require('express');
const moment = require('momentjs');
const utils = require('../utils');
var router = express.Router();

{{#schemas}}
var {{title}} = require('../Models/{{title}}.js');
var schema{{title}} = require('../Schemas/Schema-{{title}}.json');

router.get('/{{title}}', (req, res) => {
    
    
    {{title}}.all((rows)=>{
        let data{{title}} = [];
        let rendered = {};
        let emptyTxt = ["Listagem vazia. Clique no botÃ£o em baixo para adicionar um {{title}}."];
        rows.map((row) => {
            let itemData = {};
            itemData.image = [];
            let data = [];
            Object.keys(row).forEach((key) => {
                let value = row[key];
                if (value && utils.isImageUrl(value)) {
                    itemData.image.push({
                        imageUrl: value,
                        imageCaption: utils.formatValue("", key) 
                    });
                } else if (value) {
                    data.push({
                        key: utils.formatValue("", key),
                        value: utils.formatValue(key, value)
                    });
                }
            });

            itemData.actions =  {
                item: [{
                    link: '#',
                    modal: {
                        link: '{{title}}/Details/' + row.id,
                    },
                    image: { class: 'action', src: '../../images/read.png', alt: 'read' },
                    tooltip: 'Details'
                }, {
                    link: '#',
                    modal: {
                        link: '{{title}}/Edit/' + row.id,
                    },
                    image: { class: 'action', src: '../../images/edit.png', alt: 'edit' },
                    tooltip: 'Edit'
                }, {
                    link: '#',
                    image: { class: 'action',  src: '../../images/delete.png', alt: 'delete'},
                    tooltip: 'Delete',
                    events: [{
                        name: "onclick",
                        function: "remove",
                        args: row.id
                    }]
                }]
            };
            itemData.data = data;
            data{{title}}.push({
                item: itemData
            });
        });
        if (data{{title}}.length > 0) {
            emptyTxt = [];
        } 

        res.render('list', {
            pageTitle: '{{title}}',
            data: data{{title}},
            empty: emptyTxt,
            addButton: {
                link: "#",
                modal: {
                    link: "{{title}}/Insert",
                },
            }
        });
    });
});

router.get('/{{title}}/Details/:id', (req, res) => {
    
    {{title}}.get(req.params.id, (row) => {
        
        res.render('details', {
            properties: ()=>{
                var allProps = Object.getOwnPropertyNames(row);
                var validProps = [];
                allProps.forEach((prop) => {
                    
                    if (schema{{title}}.properties.hasOwnProperty(prop) && !schema{{title}}.properties[prop].primary_key) {
                        
                        validProps.push({
                            pageTitle: "{{title}} Details",
                            name: utils.formatValue("", prop),
                            value: row[prop]
                        });
                    }
                });
                
                return validProps;
            }
        });
    });
});

router.get('/{{title}}/Insert', (req, res) => {
    res.render('insert', {
        pageTitle: "Add {{title}}",
        properties: () => {
            var allProps = Object.getOwnPropertyNames(new {{title}}());
            var validProps = [];

            allProps.forEach((prop) => {
                if (schema{{title}}.properties.hasOwnProperty(prop) && !schema{{title}}.properties[prop].primary_key) {
                    validProps.push({
                        name: utils.formatValue("",prop),
                        type: ()=> {
                            if (schema{{title}}.properties[prop].type == 'number' || schema{{title}}.properties[prop].type == 'integer') {
                                return "number";
                            }
                            if (schema{{title}}.properties[prop].image) {
                                return "file";
                            }

                            if (schema{{title}}.properties[prop].conversion == "date") {
                                return "date";
                            }

                            return "text";
                        },
                        required: () => {
                            return schema{{title}}.required.includes(prop);
                        },
                        constraints: () => {
                            let constraints = [];
                            let types = {
                                minimum: "min",
                                maximum: "max",
                                minLength: "minLength",
                                maxLength: "maxLength",
                                image: "file"
                            };
                            Object.keys(types).forEach((constraint) => {
                                if(schema{{title}}.properties[prop][constraint] !== undefined) {
                                    let value = schema{{title}}.properties[prop][constraint];
                                    constraint = (schema{{title}}.properties[prop].image ? "image" : constraint);
                                    
                                    if (schema{{title}}.properties[prop].conversion == "date") {
                                        value = moment().format("YYYY-MM-DD");
                                    }

                                    if (schema{{title}}.properties[prop].image) {
                                        constraints.push({
                                            name: "accept",
                                            value: "image/*"
                                        });    
                                    }

                                    constraints.push({
                                        name: types[constraint],
                                        value: value
                                    });
                                }
                            });
                            return constraints;
                        }
                    });
                }
            });

            
            return validProps;
        }
    });
});

/*router.get('/{{title}}/Edit/:id', (req, res) => {
    
    {{title}}.get(req.params.id, (row) => {
        
        res.render('details', {
            properties: ()=>{
                var allProps = Object.getOwnPropertyNames(row);
                var validProps = [];
                allProps.forEach((prop) => {
                    
                    if (schema{{title}}.properties.hasOwnProperty(prop) && !schema{{title}}.properties[prop].primary_key) {
                        
                        validProps.push({
                            pageTitle: "{{title}} Details",
                            name: utils.formatValue("", prop),
                            value: row[prop]
                        });
                    }
                });
                
                return validProps;
            }
        });
    });
});*/

{{/schemas}}
module.exports = router;